@article{bloch2012delivering,
author = {Bloch, M and Blumberg, S and Laartz, J{\"{u}}rgen},
journal = {McKinsey Quarterly},
mendeley-groups = {UK_SQ_23_24},
pages = {2--7},
title = {{Delivering large-scale IT projects on time, on budget, and on value}},
volume = {27},
year = {2012}
}

@article{cerpa2009did,
  title={Why did your project fail?},
  author={Cerpa, Narciso and Verner, June M},
  journal={Communications of the ACM},
  volume={52},
  number={12},
  pages={130--134},
  year={2009},
  publisher={ACM New York, NY, USA}
}

@article{al2009taxonomy,
  title={A taxonomy of an IT project failure: root causes},
  author={Al-Ahmad, Walid and Al-Fagih, Khalid and Khanfar, Khalid and Alsamara, Khalid and Abuleil, Saleem and Abu-Salem, Hani},
  journal={International Management Review},
  volume={5},
  number={1},
  pages={93},
  year={2009},
  publisher={American Scholars Press, Inc.}
}

@article{linberg1999software,
  title={Software developer perceptions about software project failure: a case study},
  author={Linberg, Kurt R},
  journal={Journal of systems and software},
  volume={49},
  number={2-3},
  pages={177--192},
  year={1999},
  publisher={Elsevier}
}

@article{pinto1990causes,
  title={The causes of project failure},
  author={Pinto, Jeffrey K and Mantel, Samuel J},
  journal={IEEE transactions on engineering management},
  volume={37},
  number={4},
  pages={269--276},
  year={1990},
  publisher={IEEE}
}

@book{smart2023bdd,
  title={BDD in Action: Behavior-driven development for the whole software lifecycle},
  author={Smart, John Ferguson and Molak, Jan},
  year={2023},
  publisher={Simon and Schuster}
}

@inproceedings{pereira2018behavior,
author = {Pereira, Lauriane and Sharp, Helen and Souza, Cleidson and Oliveira, Gabriel and Marczak, Sabrina and Bastos, Ricardo},
year = {2018},
month = {05},
pages = {1-4},
title = {Behavior-driven development benefits and challenges: reports from an industrial study},
isbn = {978-1-4503-6422-5},
journal = {XP '18: Proceedings of the 19th International Conference on Agile Software Development: Companion},
doi = {10.1145/3234152.3234167}
}

@book{rceDevGuide10x,
   url = {10.5.0.202311211441},
   title = {RCE Developer Guide},
}

@article{BODEN2021100759,
abstract = {Engineering complex systems such as air- and spacecraft is a multidisciplinary effort that requires the collaboration of engineers from a multitude of specializations working in concert. Typically, each engineer uses one or more specialized software tools to analyze some data set and passes, in an ad-hoc manner, the results on to their colleagues who require these results as input for their respective tools. This process is time-consuming, error-prone, and not replicable. To alleviate this problem, we present RCE (Remote Component Environment), an open-source application developed primarily at DLR, that enables its users to intuitively integrate disciplinary tools, to define dependencies between them via an easy-to-use graphical interface, and to execute the resulting multidisciplinary engineering workflow. All data produced are stored centrally for provenance, subsequent analysis, and post-processing. Hence, RCE makes it easy for collaborating engineers to contribute their individual disciplinary tools to a multidisciplinary design or analysis, and simplifies the analysis of the workflow's results.},
author = {Boden, Brigitte and Flink, Jan and F{\"{o}}rst, Niklas and Mischke, Robert and Schaffert, Kathrin and Weinert, Alexander and Wohlan, Annika and Schreiber, Andreas},
doi = {https://doi.org/10.1016/j.softx.2021.100759},
issn = {2352-7110},
journal = {SoftwareX},
keywords = { Collaboration, Distributed execution, Tool integration, Workflow execution,Multidisciplinary analysis},
pages = {100759},
title = {{RCE: An Integration Environment for Engineering and Science}},
url = {https://www.sciencedirect.com/science/article/pii/S2352711021000820},
volume = {15},
year = {2021}
}

@inproceedings{boden2019distributed,
author = {Boden, Brigitte and Flink, Jan and Mischke, Robert and Schaffert, Kathrin and Weinert, Alexander and Wohlan, Annika and Ilic, Caslav and Wunderlich, Tobias and Liersch, Carsten M and Goertz, Stefan and Others},
booktitle = {AIAA aviation 2019 forum},
pages = {2989},
title = {{Distributed multidisciplinary optimization and collaborative process development using RCE}},
year = {2019}
}

@book{tanenbaum2007distributed,
author = {Tanenbaum, Andrew S},
title = {{Distributed systems principles and paradigms}},
year = {2007}
}


@book{coulouris2005distributed,
author = {Coulouris, George F and Dollimore, Jean and Kindberg, Tim},
publisher = {pearson education},
title = {{Distributed systems: concepts and design}},
year = {2005}
}

@InProceedings{10.1007/978-3-031-08760-8_44,
author="Mischke, Robert
and Schaffert, Kathrin
and Schneider, Dominik
and Weinert, Alexander",
editor="Groen, Derek
and de Mulatier, Cl{\'e}lia
and Paszynski, Maciej
and Krzhizhanovskaya, Valeria V.
and Dongarra, Jack J.
and Sloot, Peter M. A.",
title="Automated and Manual Testing in the Development of the Research Software RCE",
booktitle="Computational Science -- ICCS 2022",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="531--544",
abstract="Research software is often developed by individual researchers or small teams in parallel to their research work. The more people and research projects rely on the software in question, the more important it is that software updates implement new features correctly and do not introduce regressions. Thus, developers of research software must balance their limited resources between implementing new features and thoroughly testing any code changes.",
isbn="978-3-031-08760-8"
}

@misc{noauthor_windivert:_nodate,
	title = {{WinDivert}: {Windows} {Packet} {Divert}},
	url = {https://reqrypt.org/windivert.html},
	urldate = {2024-01-26},
}

@misc{noauthor_production-grade_nodate,
	title = {Kubernetes: Production-{Grade} {Container} {Orchestration}},
	url = {https://kubernetes.io/},
	abstract = {Production-Grade Container Orchestration},
	language = {en},
	urldate = {2024-01-26},
}

@misc{noauthor_chaos_nodate,
	title = {Chaos {Mesh}},
	url = {https://chaos-mesh.org/},
	abstract = {Chaos Mesh brings various types of fault simulation to Kubernetes and has an enormous capability to orchestrate fault scenarios. It helps you conveniently simulate various abnormalities that might occur in reality during the development, testing, and production environments and find potential problems in the system.},
	language = {en},
	urldate = {2024-01-26},
}

@misc{noauthor_bdd_nodate,
	title = {{BDD} {Testing} \& {Collaboration} {Tools} for {Teams} {\textbar} {Cucumber}},
	url = {https://cucumber.io/},
	urldate = {2024-01-26},
}

@misc{noauthor_gherkin_nodate,
	title = {Gherkin {Reference} - {Cucumber} {Documentation}},
	url = {https://cucumber.io/docs/gherkin/reference/},
	urldate = {2024-01-26},
}

@phdthesis{Hampel2022,
abstract = {Verteilte Softwaresysteme bringen ein sehr komplexes Verhalten unter echten Einsatzbedingungen mit sich, meist resultiert dies auch in sehr komplexen Fehlerzust{\"{a}}nden, die durch den Betrieb unter widrigen Netzwerkbedingungen wie beispielsweise hohen Latenzen und zunehmenden Paketverlusten entstehen. Diese Fehlerzust{\"{a}}nde k{\"{o}}nnen mit herk{\"{o}}mmlichen Softwaretestverfahren wie Unit- und Integrationstests nicht mehr hinreichend provoziert, getestet und verifiziert werden. Mit der Methode des Chaos-Engineerings werden komplexe Chaos-Szenarien entworfen, die es erm{\"{o}}glichen dieses unbekannte Verhalten der Software in Grenzf{\"{a}}llen strukturiert zu entdecken. Am Beispiel einer verteilten Software, die bereits seit {\"{u}}ber 10 Jahren am Deutschen Zentrum f{\"{u}}r Luft- und Raumfahrt (DLR) entwickelt wird, werden Chaos-Engineering-Methoden angewandt und sowohl konzeptuell in existierende Softwaretestverfahren eingeordnet als auch praktisch in einer Experimental-Cloud-Umgebung erprobt. Innerhalb eines Experteninterviews mit den RCE-Entwicklern wird ein Chaos-Szenario entworfen, in der die Robustheit der Software mit Chaos-Experimenten auf die Probe gestellt wird. Aufbauend auf einem Softwareprojekt zur automatischen Erstellung von RCE-Testnetzwerken, wird eine Softwarel{\"{o}}sung entwickelt die eine automatische Ausf{\"{u}}hrung von Chaos-Szenarien innerhalb der Experimental-Cloud-Umgebung erm{\"{o}}glicht. Anschlie{\ss}end wird das aus den Experteninterviews resultierende Chaos-Szenario in der Praxis durchgef{\"{u}}hrt. Abschlie{\ss}end werden die Erkenntnisse aus der Ausf{\"{u}}hrung des Chaos-Szenarios vorgestellt und weiterf{\"{u}}hrende Fragestellungen und Arbeiten aufgezeigt.},
author = {Hampel, Brian},
keywords = {Chaos Engineering,Robustheit,Software,Testing},
pages = {43},
school = {Hochschule f{\"{u}}r Technik, Wirtschaft und Kultur Leipzig},
title = {{Automatisierte Anwendung von Chaos Engineering Methoden zur Untersuchung der Robustheit eines verteilten Softwaresystems}},
url = {https://elib.dlr.de/147082/},
year = {2022}
}

@article{Farooq2023bdd,
author = {Farooq, Shoaib and Omer, Uzma and Ramzan, Amna and Rasheed, Mansoor and Atal, Zabihullah},
doi = {10.1109/ACCESS.2023.3302356},
journal = {IEEE Access},
pages = {1},
title = {{Behavior Driven Development: A Systematic Literature Review}},
volume = {PP},
year = {2023}
}

@inproceedings{Binamungu2020bdd,
abstract = {Behaviour Driven Development (BDD) is an agile testing technique that enables software requirements to be specified as example interactions with the system, using structured natural language. While (in theory) being readable by non-technical stakeholders, the examples can also be executed against the code base to identify behaviours that are not yet correctly implemented. Writing good BDD suites, however, is challenging. A typical suite can contain hundreds of individual scenarios, that must correctly specify the system as a whole as well as individually. Despite much discussion amongst practitioners and in the blogosphere, as yet no formal definition of what makes for a high quality BDD suite has been given. To shed light on this, we surveyed BDD practitioners, asking for their opinions on the quality criteria that are important for BDD suites. We proposed, and asked for opinions on, four quality principles, and gave practitioners the option to add more principles of their own. This paper reports on the results of the survey, and presents an approach to defining BDD suite quality.},
address = {Cham},
author = {Binamungu, Leonard Peter and Embury, Suzanne M and Konstantinou, Nikolaos},
booktitle = {Agile Processes in Software Engineering and Extreme Programming},
editor = {Stray, Viktoria and Hoda, Rashina and Paasivaara, Maria and Kruchten, Philippe},
isbn = {978-3-030-49392-9},
pages = {87--102},
publisher = {Springer International Publishing},
title = {{Characterising the Quality of Behaviour Driven Development Specifications}},
year = {2020}
}

@book{wynne2012cucumber,
abstract = {Your customers want rock-solid, bug-free software that does exactly what they expect it to do. Yet they can't always articulate their ideas clearly enough for you to turn them into code. The Cucumber Book dives straight into the core of the problem: communication between people. Cucumber saves the day; it's a testing, communication, and requirements tool - all rolled into one. We'll show you how to express your customers' wild ideas as a set of clear, executable specifications that everyone on the team can read. You'll learn how to feed those examples into Cucumber and let it guide your development. You'll build just the right code to keep your customers happy, and not a line more. The first part of the book teaches you how to use the core features of Cucumber. You'll learn how to use Cucumber's Gherkin DSL to describe-- in plain language - the behavior your customers want from the system. You'll learn how to write Ruby code that interprets those plain language specifications and checks them against your application. In Part 2, you'll consolidate the knowledge you just gained with a worked example. Although it was born in the Ruby community, you can use Cucumber to test almost any system, from a simple shell script or a Perl script, to enterprise PHP or a Java web application. In Part 3, you'll find a selection of recipes for some of the most common situations you'll encounter using Cucumber in the wild. You'll learn how to test Ajax-heavy web applications with Capybara and Selenium, REST web services, Ruby on Rails applications, command-line applications, legacy applications and lots more! Written by the creator of Cucumber and one of its most experienced users and contributors, The Cucumber Book is an authoritative guide that will give you and your team all the knowledge you need to start using Cucumber with confidence. What You Need: Windows, Mac OS X (with XCode) or Linux Ruby 1.9.2 and upwards},
author = {Wynne, Matt and Hellesoy, Aslak},
isbn = {1934356808},
publisher = {Pragmatic Bookshelf},
title = {{The Cucumber Book: Behaviour-Driven Development for Testers and Developers}},
year = {2012}
}

@book{burns2022kubernetes,
author = {Burns, Brendan and Beda, Joe and Hightower, Kelsey and Evenson, Lachlan},
publisher = {" O'Reilly Media, Inc."},
title = {{Kubernetes: up and running}},
year = {2022}
}


@inbook{Lima2017,
  title = {A Survey on Testing Distributed and Heterogeneous Systems: The State of the Practice},
  ISBN = {9783319625690},
  ISSN = {1865-0937},
  url = {http://dx.doi.org/10.1007/978-3-319-62569-0_5},
  DOI = {10.1007/978-3-319-62569-0_5},
  booktitle = {Software Technologies},
  publisher = {Springer International Publishing},
  author = {Lima,  Bruno and Faria,  João Pascoal},
  year = {2017},
  pages = {88–107}
}

@inproceedings{Liu,
  series = {HICSS-00},
  title = {Distributed systems testing},
  url = {http://dx.doi.org/10.1109/HICSS.2000.926970},
  DOI = {10.1109/hicss.2000.926970},
  booktitle = {Proceedings of the 33rd Annual Hawaii International Conference on System Sciences},
  publisher = {IEEE Comput. Soc},
  author = {Liu,  A. and Nixon,  P.},
  collection = {HICSS-00}
}

@inproceedings{Feldman1978,
  series = {ACM 78},
  title = {Programming Distributed Systems},
  url = {http://dx.doi.org/10.1145/800127.804118},
  DOI = {10.1145/800127.804118},
  booktitle = {Proceedings of the 1978 annual conference on   - ACM 78},
  publisher = {ACM Press},
  author = {Feldman,  J. A. and Low,  J. R. and Rovner,  P. D.},
  year = {1978},
  collection = {ACM 78}
}

@inbook{Xingang2018,
  title = {A Research Review of Distributed Computing System},
  ISBN = {9789811089442},
  ISSN = {2194-5365},
  url = {http://dx.doi.org/10.1007/978-981-10-8944-2_42},
  DOI = {10.1007/978-981-10-8944-2_42},
  booktitle = {Recent Developments in Intelligent Computing,  Communication and Devices},
  publisher = {Springer Singapore},
  author = {Xingang,  Wang},
  year = {2018},
  month = aug,
  pages = {357–368}
}